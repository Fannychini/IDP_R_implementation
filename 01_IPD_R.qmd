---
title: "IDP implementation in R"
author: "Fanny Franchini"
format: html
editor: source
---

```{r setup, include=TRUE}
knitr::opts_chunk$set(echo = TRUE)

# Library
library(tidyverse)
library(lubridate)

# Reproducibility
set.seed(239) 
sessionInfo()
```

## Background
SAS code for the implementation of the Individualised Dispensing Patterns (IDP) method for defining medicine exposure is published: *Bharat, C, Degenhardt, L, Pearson, S-A, et al. A data-informed approach using individualised dispensing patterns to estimate medicine exposure periods and dose from pharmaceutical claims data. Pharmacoepidemiol Drug Saf. 2023; 32( 3): 352- 365. doi:10.1002/pds.5567*

SAS code available here <https://github.com/c-bharat/IDP_exposure_method>.

**The objective is to implement the method in R**
1. Understanding the SAS code
2. Implementation of `e_pop_estimate` macro
3. Implementation of `exposure_by_drug` macro

## Undertanding the SAS code
Noting this is based on my understanding of the method as a non-SAS user. 

The `e_pop_estimate` macro calculates population-level exposure based on a drug or medicine group, by:

- sorting dispensing data by person (PPN) and date
- identifying continuous episodes of medicine use (new episode if gap â‰¥ 365 days)
- calculating 'days per unit' by dividing the gap between dispensings by previous quantity
- calculating the 20th, 50th, 80th and 90th percentiles of this distribution

The `exposure_by_drug` macro creates the exposure history for each individual. It calculates the start and end dates of exposure intervals, based on the dispensing data, and assigns exposure status (current, recent, or formerly exposed). This is done by:

- Taking the drug group number, output dataset name, and study end date
- Applying the IDP method to calculate personalised exposure duration estimates
- Using a  weighted formula that adapts as more dispensing data becomes available, ~ sliding window


The weighted formula creates three exposure categories:

- Currently exposed (es=1): from dispensing day to estimated end of supply
- Recently exposed (es=2): short period after current exposure (default 7 days)
- Formerly exposed (es=3): after recent exposure until next dispensing

```
/* For first dispensing */
IF t_nm1=. THEN e_n = q_D*(P_80);

/* For second dispensing - weighted average */
ELSE IF t_nm2=. THEN e_n = q_D*( (3/6)*(Date_of_Supply-t_nm1)/q_nm1 + (2/6)*(P_80) + (1/6)*(P_80) );

/* For third and later - more personalised */
ELSE IF t_nm3=. THEN e_n = q_D*( (3/6)*(Date_of_Supply-t_nm1)/q_nm1 + (2/6)*(t_nm1-t_nm2)/q_nm2 + (1/6)*(P_80) );
```

The output dataset contains exposure histories with:

- start_date/end_date: interval boundaries
- es: exposure status (1=current, 2=recent, 3=former)
- cens_date: censoring date (death or end of follow-up)
- episode tracking variables

## Implementation of `e_pop_estimate` macro

```{r}
# including necessary steps
# stick to the same variable names
e_pop_estimate <- function(item_code, macro_d) {
  
  # sort data by PPN and dispensing date
  macro_d <- macro_d %>%
    arrange(PPN, Date_of_Supply)
  
  # initialise variables and calculate dispensing intervals
  e_pope <- macro_d %>%
    filter(group == item_code) %>%
    mutate(last_time = NA,
           last_q = NA,
           new_episode = 0,
           t_nm1 = NA,
           q_nm1 = NA) %>%
    group_by(PPN) %>%
    mutate(t_nm1 = lag(last_time),
           q_nm1 = lag(last_q),
           last_q = q_D,
           last_time = Date_of_Supply) %>%
    filter(is.na(t_nm1) | Date_of_Supply - t_nm1 >= 365) %>%
    mutate(new_episode = 1) %>%
    ungroup()
  
  # check output
  print(head(e_pope, 50))
  
  # calculate days per unit following a dispensing day
  e_pop_est <- e_pope %>%
    mutate(dif = Date_of_Supply - t_nm1, e_pop_est = dif / q_nm1) %>%
    group_by(PPN) %>%
    mutate(first_interval = ifelse(first(PPN), 1, 0)) %>%
    ungroup()
  
  # check again
  print(head(e_pop_est, 50))
  
  # calculate the 80th percentile estimate
  e_pop_est_summary <- e_pop_est %>%
    summarise(P_80 = quantile(e_pop_est, 0.8, na.rm = TRUE))
  
  print(e_pop_est_summary)
  
  return(e_pop_est_summary)
}
```


## Implementation of `exposure_by_drug` macro

```{r}
# including necessary steps
exposure_by_drug <- function() {
  # subset dispensing data for the specific drug
  
  # merge population-level exposure estimate

  # evaluation of exposure duration
  
  # calculate exposure number and assign exposure periods
 
  # generate exposure intervals (current, recent, and formerly exposed)
  
  # generate final dataframe
  
  return()
}
```
